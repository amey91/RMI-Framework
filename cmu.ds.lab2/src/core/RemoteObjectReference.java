package core;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class RemoteObjectReference implements java.io.Serializable{
	/**
	 * autogenerated UID
	 */
	private static final long serialVersionUID = 4532216813002720501L;
	
	private String serverIP;
	private int serverPort;
	private String bindname; // this will be matched with "HostMachineIP:Port/bindname"
	private String interfaceImplemented;
	
	public RemoteObjectReference() {
		
	}
	
	public RemoteObjectReference(String s, int p, String name, String interfaceImpl) {
		this.serverIP = s;
		this.serverPort = p;
		this.bindname = name;
		this.interfaceImplemented = interfaceImpl;
	}
	
	@Override
	public String toString(){
		return serverIP + ":" + serverPort + "/" + bindname;
		//return "Bindname: "+ bindname+" | Interface Implemented: "+ interfaceImplemented + " Server: "+ serverIP + ":"+serverPort;
		
	}
	
	public String getServerIp() {
		return serverIP;
	}

	public int getServerPort() {
		return serverPort;
	}
	
	public Remote440 toStub() throws Remote440Exception	{
		Class<?> stubClass = null;
		Constructor<?> constructorNew = null;
		Remote440 instance = null;
		String stubName = interfaceImplemented + "_Stub";
		
		// instantiate stub class by name 
		try{
			stubClass = Class.forName(stubName);
		} catch(ClassNotFoundException e){
			// TODO get class by HTTP
			throw new Remote440Exception("Invalid class/class-not-found while creating stub");
		}
		
		try {
			constructorNew = stubClass.getConstructor(RemoteObjectReference.class);
			instance = (Remote440)constructorNew.newInstance((Object)this);
		} catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			throw new Remote440Exception("Invalid constructor while creating stub");
		}
		return instance;
	}

	public String getBindName() {
		return bindname;
	}

	public String getInterfaceImplemented() {
		return interfaceImplemented;
	}
}
